# Copyright (C) Pipin Fitriadi - All Rights Reserved

# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
# Written by Pipin Fitriadi <pipinfitriadi@gmail.com>, 28 August 2024

spec:
  inputs:
    codecoverage-percentage-passed:
      description: Percentage as an integer for passing code coverage
      type: number
      default: 34
    dags-check-dependencies:
      description: Add python dependencies for DAGs Check
      default: kubernetes apache-airflow-providers-cncf-kubernete
    docker-release:
      description: Setting to enable or disable the Release Docker CI Job
      type: boolean
      default: true
    infra-provider:
      description: "Choose target infrastructure provider for deployment. Available options: 'JabarCloud-v1', 'JabarCloud-v2'."
      default: JabarCloud-v1
      options:
        - JabarCloud-v1
        - JabarCloud-v2
---
include:
  - local: templates/jds/infra-provider/$[[ inputs.infra-provider ]].yml
stages: [Test, Release, Deploy]
.airflow-rules:
  rules:
    - if: |
        $CI_COMMIT_BRANCH == 'main' ||
        (
          "$[[ inputs.infra-provider ]]" == 'JabarCloud-v2' &&
          $CI_COMMIT_BRANCH == 'develop'
        )
      changes: [airflow/dags/**/dag_*.py]
.jds-rules-changes: &jds-rules-changes
  changes:
    - src/**/*
    - tests/**/*
    - pyproject.toml
    - requirements.txt
.pip-variables:
  variables:
    PIP_ROOT_USER_ACTION: ignore
    PIP_DISABLE_PIP_VERSION_CHECK: 1
Code Quality:
  stage: Test
  extends: .pip-variables
  rules:
    - changes: ['**/*.py']
  image: pipelinecomponents/flake8
  before_script:
    - pip install flake8-bandit flake8-black flake8-bugbear flake8-isort
  script:
    - flake8
Code Coverage:
  stage: Test
  extends: .pip-variables
  rules:
    - if: |
        $CI_COMMIT_BRANCH == 'main' ||
        (
          "$[[ inputs.infra-provider ]]" == 'JabarCloud-v2' &&
          $CI_COMMIT_BRANCH == 'develop'
        ) ||
        $CI_COMMIT_TAG =~ /(?i)\A(?:v?(?:([0-9]+)!)?([0-9]+(?:\.[0-9]+)*)([-_.]?((a|b|c|rc|alpha|beta|pre|preview))[-_.]?([0-9]+)?)?((?:-([0-9]+))|(?:[-_.]?(post|rev|r)[-_.]?([0-9]+)?))?([-_.]?(dev)[-_.]?([0-9]+)?)?(?:\+([a-z0-9]+(?:[-_.][a-z0-9]+)*))?)\z/
      <<: *jds-rules-changes
  image: python:3.8-slim-bookworm
  before_script:
    - pip install coverage toml unittest-xml-reporting
    - python -c 'import toml; c = toml.load("pyproject.toml"); print("\n".join([*c["project"].get("dependencies", []), *[row for optional_dependency in c["project"].get("optional-dependencies", {}).values() for row in optional_dependency]]))' > /tmp/package-requirements.txt
    - pip install -r /tmp/package-requirements.txt -r requirements.txt
  script:
    - coverage run -m xmlrunner --output-file unittest-report.xml
    - coverage report -m
    - if [ $(printf '%.0f' $(coverage report | awk '$1 == "TOTAL" {print $NF+0}')) -ge $[[ inputs.codecoverage-percentage-passed ]] ]; then exit; else exit 1; fi
  coverage: /TOTAL.*\s+(\d+%)/
  artifacts:
    when: always
    reports:
      junit: unittest-report.xml
DAGs Check:
  stage: Test
  extends: [.airflow-rules, .pip-variables]
  image:
    name: apache/airflow:slim-$AIRFLOW_VERSION-python3.8
    entrypoint: ['']
    docker:
      user: airflow
  variables:
    AIRFLOW__CORE__DAGS_FOLDER: airflow/dags/
  before_script:
    - pip install $[[ inputs.dags-check-dependencies ]]
    - airflow db init
  script:
    - airflow dags list-import-errors
    - airflow dags list
Docker:
  stage: Release
  needs:
    - job: Code Quality
      optional: true
    - Code Coverage
  rules:
    - if: |
        (
          $CI_COMMIT_BRANCH == 'main' ||
          (
            "$[[ inputs.infra-provider ]]" == 'JabarCloud-v2' &&
            $CI_COMMIT_BRANCH == 'develop'
          )
        ) &&
        "$[[ inputs.docker-release ]]" == 'true'
      <<: *jds-rules-changes
  image: docker:24.0.5
  services: [docker:24.0.5-dind]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: /certs
  before_script:
    - |
      cat <<'EOF' > Dockerfile
      ARG TAG=nonroot

      FROM python:3.8-slim-bookworm AS venv
      LABEL maintainer=pipinfitriadi@gmail.com
      ENV DEBIAN_FRONTEND=noninteractive
      ENV DEBCONF_NOWARNINGS=yes
      ENV PIP_ROOT_USER_ACTION=ignore
      ENV PIP_DISABLE_PIP_VERSION_CHECK=1
      RUN --mount=type=cache,target=/var/cache/apt \
          apt-get update && \
          apt-get install -y \
              git && \
          pip install \
              --no-cache-dir \
              --upgrade \
              pip==21.2.4 && \
          pip install \
              --no-cache-dir \
              toml
      COPY pyproject.toml requirements.txt /tmp/
      RUN python \
              -c 'import toml; c = toml.load("/tmp/pyproject.toml"); print("\n".join([*c["project"].get("dependencies", []), *[row for optional_dependency in c["project"].get("optional-dependencies", {}).values() for row in optional_dependency]]))' \
              > /tmp/package-requirements.txt && \
          pip install \
              --no-cache-dir \
              --target=/opt/venv/ \
              -r /tmp/package-requirements.txt \
              -r /tmp/requirements.txt

      FROM venv AS package
      LABEL maintainer=pipinfitriadi@gmail.com
      COPY . /tmp/repo/
      RUN pip install \
              --no-cache-dir \
              --target=/opt/venv/ \
              --no-deps \
              --upgrade \
              git+file:///tmp/repo/

      FROM gcr.io/distroless/python3-debian12:$TAG AS final
      LABEL maintainer=pipinfitriadi@gmail.com
      ENV PYTHONPATH=$PYTHONPATH:/opt/venv/
      COPY --from=python:3.8-slim-bookworm /usr/local/lib/ /usr/local/lib/
      COPY --from=python:3.8-slim-bookworm /usr/local/bin/python3.8 /usr/local/bin/python3.8
      ENTRYPOINT ["/opt/venv/bin/dataproduct"]
      CMD ["--help"]
      COPY --from=package /opt/venv/ /opt/venv/
      EOF
    - |
      BUILD_TAG=$(if [[ $CI_COMMIT_BRANCH == 'main' ]]; then echo 'nonroot'; else echo 'debug-nonroot'; fi)
      IMAGE_TAG=$(if [[ $CI_COMMIT_BRANCH == 'main' ]]; then echo 'prod'; else echo 'dev'; fi)
      cat <<EOF > docker-compose.yaml
      services:
        dataproduct:
          platform: linux/amd64
          image: $HARBOR_REGISTRY/data-pipeline/$CI_PROJECT_NAME:$IMAGE_TAG
          build:
            args:
              - TAG=$BUILD_TAG
            cache_from:
              - type=registry,ref=python:3.8-slim-bookworm
              - type=registry,ref=$CI_REGISTRY_IMAGE:$IMAGE_TAG
            cache_to:
              - type=registry,ref=$CI_REGISTRY_IMAGE:$IMAGE_TAG
      EOF
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" --username "$CI_REGISTRY_USER" --password-stdin
    - echo "$HARBOR_PASSWORD" | docker login "$HARBOR_REGISTRY" --username "$HARBOR_USER" --password-stdin
    - docker context create builder
    - docker buildx create builder --use
  script:
    - docker compose pull || true
    - docker compose build
    - docker compose push
    - apk add --no-cache curl
    - |
      curl --header 'Content-Type: application/json' --header "JOB-TOKEN: $CI_JOB_TOKEN" \
      --data "{ \"name\": \"Harbor's image ($IMAGE_TAG)\", \"tag_name\": \"harbor.$IMAGE_TAG.$CI_COMMIT_SHORT_SHA\", \"ref\": \"$CI_COMMIT_SHA\", \"description\": \"\`\`\`sh\\ndocker pull $HARBOR_REGISTRY/data-pipeline/$CI_PROJECT_NAME:$IMAGE_TAG\\n\`\`\`\", \"assets\": { \"links\": [{ \"link_type\": \"image\", \"name\": \"Harbor\", \"url\": \"https://$HARBOR_REGISTRY/harbor/projects/29/repositories/$CI_PROJECT_NAME\" }] } }" \
      --request POST "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases"
  after_script:
    - docker logout "$CI_REGISTRY"
    - docker logout "$HARBOR_REGISTRY"
PyPI:
  stage: Release
  needs:
    - job: Code Quality
      optional: true
    - Code Coverage
  extends: .pip-variables
  rules:
    - if: $CI_COMMIT_TAG =~ /(?i)\A(?:v?(?:([0-9]+)!)?([0-9]+(?:\.[0-9]+)*)([-_.]?((a|b|c|rc|alpha|beta|pre|preview))[-_.]?([0-9]+)?)?((?:-([0-9]+))|(?:[-_.]?(post|rev|r)[-_.]?([0-9]+)?))?([-_.]?(dev)[-_.]?([0-9]+)?)?(?:\+([a-z0-9]+(?:[-_.][a-z0-9]+)*))?)\z/
      exists:
        - src/**/*
        - tests/**/*
        - pyproject.toml
  image: python:3.8-slim-bookworm
  variables:
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: $CI_JOB_TOKEN
  before_script:
    - apt-get update
    - apt-get install -y git
    - pip install build twine
  script:
    - python -m build
    - twine upload --skip-existing --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
DAGs Deploy:
  stage: Deploy
  needs:
    - job: Code Quality
      optional: true
    - DAGs Check
  extends: .airflow-rules
  image: bitnami/git:2.36.1
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
  before_script:
    - COMMIT_MESSAGE=$(git show $CI_COMMIT_SHA --pretty=format:"%s%nCommit Origin":" $(git remote get-url origin | sed -E 's#https://[^@]+@#https://#; s/\.git$//')/-/commit/%h" --no-patch)
    - if [[ "$[[ inputs.infra-provider ]]" == 'JabarCloud-v1' ]]; then DAG_PARENT_DIR=DAG/; else DAG_PARENT_DIR=; fi
    - git config --global user.email $(git show $CI_COMMIT_SHA --pretty=format:'%ae' --no-patch)
    - git config --global user.name $(git show $CI_COMMIT_SHA --pretty=format:'%an' --no-patch)
    - git config --global url.https://$GITLAB_USERNAME:$GITLAB_PASSWORD@gitlab.com.insteadOf https://gitlab.com
    - git clone --depth 1 $GIT_REPO /tmp/repo/ --single-branch --branch $GIT_BRANCH
    - repo_dir=$(pwd)
    - cd /tmp/repo/
  script:
    - |
      if [ $(git submodule--helper list | awk '{print $4}' | grep $DAG_PARENT_DIR$CI_PROJECT_NAME) ]; then
        git submodule update --init -- $DAG_PARENT_DIR$CI_PROJECT_NAME
        git submodule deinit -f -- $DAG_PARENT_DIR$CI_PROJECT_NAME
        git rm -f $DAG_PARENT_DIR$CI_PROJECT_NAME
        rm -rf .git/modules/$DAG_PARENT_DIR$CI_PROJECT_NAME/
      fi
    - rm -rf $DAG_PARENT_DIR$CI_PROJECT_NAME/
    - |
      find $repo_dir/airflow/dags/ -type f ! -name 'example.py' ! -name 'branch_example.py' -print0 | while IFS= read -r -d '' file; do
        dest_dir=$DAG_PARENT_DIR$CI_PROJECT_NAME/$(dirname ${file#$repo_dir/airflow/dags/})
        mkdir -p $dest_dir/
        cp $file $dest_dir/
      done
    - git add --all
    - |
      if [[ -n $(git status --porcelain) ]]; then
        git commit -m "$COMMIT_MESSAGE"
        git show -1 --patch-with-stat --minimal
        git push origin HEAD:$GIT_BRANCH
      fi
